server.port=8001

project.version =@prject.version@

local.host=127.0.0.1
local.port=8080

#kafka
#生产者配置
# 指定kafka server的地址，集群配多个，中间，逗号隔开
spring.kafka.bootstrap-servers=192.168.10.129:9092
#=============== provider  =======================
# 写入失败时，重试次数。当leader节点失效，一个repli节点会替代成为leader节点，此时可能出现写入失败，
# 当retris为0时，produce不会重复。retirs重发，此时repli节点完全成为leader节点，不会产生消息丢失。
spring.kafka.producer.retries=0
# 每次批量发送消息的数量,produce积累到一定数据，一次发送
spring.kafka.producer.batch-size=16384
# produce积累数据一次发送，缓存大小达到buffer.memory就发送数据
spring.kafka.producer.buffer-memory=33554432
#procedure要求leader在考虑完成请求之前收到的确认数，用于控制发送记录在服务端的持久化，其值可以为如下：
#acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
#acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
#acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
#可以设置的值为：all, -1, 0, 1
spring.kafka.producer.acks=1
# 指定消息key和消息体的编解码方式
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

####消费者配置
#################consumer的配置参数（开始）#################
##如果'enable.auto.commit'为true，则消费者偏移自动提交给Kafka的频率（以毫秒为单位），默认值为5000。
#spring.kafka.consumer.auto-commit-interval;
#
##当Kafka中没有初始偏移量或者服务器上不再存在当前偏移量时该怎么办，默认值为latest，表示自动将偏移重置为最新的偏移量
##可选的值为latest, earliest, none
#spring.kafka.consumer.auto-offset-reset=latest;
#
##以逗号分隔的主机：端口对列表，用于建立与Kafka群集的初始连接。
#spring.kafka.consumer.bootstrap-servers;
#
##ID在发出请求时传递给服务器;用于服务器端日志记录。
#spring.kafka.consumer.client-id;
#
##如果为true，则消费者的偏移量将在后台定期提交，默认值为true
#spring.kafka.consumer.enable-auto-commit=true;
#
##如果没有足够的数据立即满足“fetch.min.bytes”给出的要求，服务器在回答获取请求之前将阻塞的最长时间（以毫秒为单位）
##默认值为500
#spring.kafka.consumer.fetch-max-wait;
#
##服务器应以字节为单位返回获取请求的最小数据量，默认值为1，对应的kafka的参数为fetch.min.bytes。
#spring.kafka.consumer.fetch-min-size;
#
##用于标识此使用者所属的使用者组的唯一字符串。
#spring.kafka.consumer.group-id;
#
##心跳与消费者协调员之间的预期时间（以毫秒为单位），默认值为3000
#spring.kafka.consumer.heartbeat-interval;
#
##密钥的反序列化器类，实现类实现了接口org.apache.kafka.common.serialization.Deserializer
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#
##值的反序列化器类，实现类实现了接口org.apache.kafka.common.serialization.Deserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#
##一次调用poll()操作时返回的最大记录数，默认值为500
#spring.kafka.consumer.max-poll-records;
##################consumer的配置参数（结束）#################

#=============== consumer  =======================
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.auto-commit-interval=5000
spring.kafka.consumer.client-id=etc-service
spring.kafka.consumer.group-id=etc-service
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

#rabbitmq
spring.rabbitmq.host=192.168.10.129
spring.rabbitmq.port=5672
spring.rabbitmq.username=test
spring.rabbitmq.password=test
spring.rabbitmq.virtual-host=/testVirtual

spring.redis.host=192.168.10.129
spring.redis.port=6379
spring.redis.database=0
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.jedis.pool.max-active=200
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.jedis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.jedis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.jedis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=10000
#缓存过期时间(秒)
spring.redis.expire=1800
